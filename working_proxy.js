const WebSocket = require('ws');const net = require('net');const http = require('http');const fs = require('fs');const path = require('path');const PORT = 8080;const VNC_HOST = '127.0.0.1';const VNC_PORT = 5901;console.log(`🚀 Starting VNC WebSocket proxy on port ${PORT}`);console.log(`📡 Forwarding /websockify to VNC server at ${VNC_HOST}:${VNC_PORT}`);// Create HTTP server that serves static files AND health checksconst server = http.createServer((req, res) => {    console.log(`📄 HTTP Request: ${req.method} ${req.url}`);        if (req.url === '/health') {        res.writeHead(200, { 'Content-Type': 'application/json' });        res.end(JSON.stringify({ status: 'ok', port: PORT, vnc: `${VNC_HOST}:${VNC_PORT}` }));        return;    }        // Serve static files    let filePath = req.url === '/' ? '/vnc.html' : req.url;    const fullPath = path.join(__dirname, filePath);        console.log(`📁 Serving file: ${fullPath}`);        fs.readFile(fullPath, (err, data) => {        if (err) {            console.log(`❌ File not found: ${fullPath}`);            res.writeHead(404, { 'Content-Type': 'text/html' });            res.end('<h1>404 - File Not Found</h1><p>Available files: /vnc.html, /health</p>');            return;        }                // Set content type based on file extension        const ext = path.extname(fullPath);        const contentTypes = {            '.html': 'text/html',            '.js': 'application/javascript',            '.css': 'text/css',            '.png': 'image/png',            '.jpg': 'image/jpeg',            '.gif': 'image/gif'        };                const contentType = contentTypes[ext] || 'text/plain';        console.log(`✅ Serving ${filePath} as ${contentType}`);        res.writeHead(200, { 'Content-Type': contentType });        res.end(data);    });});// Create WebSocket serverconst wss = new WebSocket.Server({     server,    path: '/websockify'});wss.on('connection', function connection(ws, req) {    const clientIP = req.socket.remoteAddress;    const connectionId = Math.random().toString(36).substr(2, 9);        console.log(`📡 [${connectionId}] New WebSocket connection from ${clientIP}`);    console.log(`📡 [${connectionId}] Headers:`, req.headers);        // Connect to VNC server    const vncSocket = net.createConnection(VNC_PORT, VNC_HOST);        vncSocket.on('connect', () => {        console.log(`✅ [${connectionId}] Connected to VNC server ${VNC_HOST}:${VNC_PORT}`);    });        // Forward WebSocket messages to VNC server    ws.on('message', function message(data) {        console.log(`📤 [${connectionId}] WS→VNC: ${data.length} bytes`);        if (vncSocket.writable) {            vncSocket.write(data);        } else {            console.log(`⚠️  [${connectionId}] VNC socket not writable, closing WebSocket`);            ws.close();        }    });        // Forward VNC server data to WebSocket    vncSocket.on('data', (data) => {        console.log(`📥 [${connectionId}] VNC→WS: ${data.length} bytes`);        if (ws.readyState === WebSocket.OPEN) {            ws.send(data);        } else {            console.log(`⚠️  [${connectionId}] WebSocket not open, closing VNC connection`);            vncSocket.destroy();        }    });        // Handle connection cleanup    ws.on('close', (code, reason) => {        console.log(`🔌 [${connectionId}] WebSocket closed: code=${code}, reason=${reason || 'none'}`);        vncSocket.destroy();    });        ws.on('error', (err) => {        console.log(`❌ [${connectionId}] WebSocket error: ${err.message}`);        vncSocket.destroy();    });        vncSocket.on('close', () => {        console.log(`🔌 [${connectionId}] VNC connection closed`);        if (ws.readyState === WebSocket.OPEN) {            ws.close();        }    });        vncSocket.on('error', (err) => {        console.log(`❌ [${connectionId}] VNC connection error: ${err.message}`);        if (ws.readyState === WebSocket.OPEN) {            ws.close();        }    });});server.listen(PORT, '0.0.0.0', () => {    console.log(`✅ HTTP server listening on 0.0.0.0:${PORT}`);    console.log(`✅ WebSocket server ready at ws://localhost:${PORT}/websockify`);    console.log(`🏥 Health check available at http://localhost:${PORT}/health`);    console.log(`🌐 VNC Client available at http://localhost:${PORT}/vnc.html`);});